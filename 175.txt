// MyTextApp.swift

@main
struct MyTextApp: App {
    var body: some Scene {
        DocumentGroup(newDocument: MyTextDocument()) { file in
            ContentView(document: file.$document)
        }
    }
}



// MyTextDocument.swift

import UniformTypeIdentifiers

extension UTType {
    static var exampleText: UTType {
       UTType(importedAs: "com.example.plain-text")
    }
}

struct MyTextDocument: FileDocument {
    var text: String

    init(text: String = "Hello, world!") {
        self.text = text
    }

      static var readableContentTypes: [UTType] { [.exampleText] }
      //static var readableContentTypes = [UTType.plainText]

    init(configuration: ReadConfiguration) throws {
        guard let data = configuration.file.regularFileContents,
              let string = String(data: data, encoding: .utf8)
        else {
            throw CocoaError(.fileReadCorruptFile)
        }
        text = string
    }
    
    func fileWrapper(configuration: WriteConfiguration) throws -> FileWrapper {
        let data = text.data(using: .utf8)!
        return .init(regularFileWithContents: data)
    }
}


// ContentView.swift

struct ContentView: View {
    @Binding var document: MyTextDocument

    var body: some View {
        TextEditor(text: $document.text)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView(document: .constant(MyTextDocument()))
    }
}


